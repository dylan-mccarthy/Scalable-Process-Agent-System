name: CI Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME_CONTROL_PLANE: ${{ github.repository }}/control-plane
  IMAGE_NAME_NODE_RUNTIME: ${{ github.repository }}/node-runtime
  IMAGE_NAME_ADMIN_UI: ${{ github.repository }}/admin-ui

jobs:
  # Build and Test .NET Projects
  dotnet-build-test:
    name: .NET Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build solution
        run: dotnet build --no-restore --configuration Release
      
      - name: Run tests
        run: dotnet test --configuration Release --verbosity minimal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: dotnet-test-results
          path: '**/TestResults/**/*.trx'
      
      - name: Upload code coverage
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: dotnet-code-coverage
          path: '**/TestResults/**/coverage.cobertura.xml'
      
      # Generate SBOM for .NET projects
      - name: Generate SBOM for Control Plane API
        uses: anchore/sbom-action@v0
        with:
          path: ./src/ControlPlane.Api
          artifact-name: sbom-controlplane-api.spdx.json
          output-file: sbom-controlplane-api.spdx.json
          format: spdx-json
      
      - name: Generate SBOM for Node Runtime
        uses: anchore/sbom-action@v0
        with:
          path: ./src/Node.Runtime
          artifact-name: sbom-node-runtime.spdx.json
          output-file: sbom-node-runtime.spdx.json
          format: spdx-json
      
      - name: Upload SBOMs
        uses: actions/upload-artifact@v5
        with:
          name: dotnet-sboms
          path: '*.spdx.json'
  
  # Build and Test Next.js Admin UI
  nextjs-build-test:
    name: Next.js Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./src/admin-ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./src/admin-ui/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Build application
        run: npm run build
      
      - name: Run tests (if present)
        run: npm test --if-present
        continue-on-error: true
      
      # Generate SBOM for Next.js project
      - name: Generate SBOM for Admin UI
        uses: anchore/sbom-action@v0
        with:
          path: ./src/admin-ui
          artifact-name: sbom-admin-ui.spdx.json
          output-file: sbom-admin-ui.spdx.json
          format: spdx-json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v5
        with:
          name: nextjs-sbom
          path: sbom-admin-ui.spdx.json
  
  # Test Helm Chart and Observability Configuration
  helm-observability-test:
    name: Helm Chart and Observability Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'
      
      - name: Run Helm observability test
        run: |
          chmod +x ./tests/helm-observability-test.sh
          ./tests/helm-observability-test.sh
      
      - name: Run Docker Compose observability test
        run: |
          chmod +x ./tests/docker-compose-observability-test.sh
          ./tests/docker-compose-observability-test.sh
      
      - name: Install actionlint
        run: |
          ACTIONLINT_VERSION=$(curl -s https://api.github.com/repos/rhysd/actionlint/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -sL "https://github.com/rhysd/actionlint/releases/download/v${ACTIONLINT_VERSION}/actionlint_${ACTIONLINT_VERSION}_linux_amd64.tar.gz" | tar xz
          sudo mv actionlint /usr/local/bin/
      
      - name: Validate GitHub Actions workflows
        run: |
          chmod +x ./tests/validate-workflows.sh
          ./tests/validate-workflows.sh
  
  # Build Container Images and Generate SBOMs
  docker-build:
    name: Build and Scan Container Images
    runs-on: ubuntu-latest
    needs: [dotnet-build-test, nextjs-build-test, helm-observability-test]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: read
      packages: write
      id-token: write  # For Sigstore signing
      security-events: write  # For uploading SARIF results
    
    strategy:
      matrix:
        include:
          - name: control-plane
            dockerfile: ./src/ControlPlane.Api/Dockerfile
            context: .
            image: control-plane
          - name: node-runtime
            dockerfile: ./src/Node.Runtime/Dockerfile
            context: .
            image: node-runtime
          - name: admin-ui
            dockerfile: ./src/admin-ui/Dockerfile
            context: ./src/admin-ui
            image: admin-ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Security scanning with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.name }}.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
          category: 'trivy-${{ matrix.name }}'
      
      # Generate SBOM for container image
      - name: Generate SBOM for container image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          artifact-name: sbom-${{ matrix.name }}-image.spdx.json
          output-file: sbom-${{ matrix.name }}-image.spdx.json
          format: spdx-json
      
      - name: Upload container SBOM
        uses: actions/upload-artifact@v5
        with:
          name: sbom-${{ matrix.name }}-image
          path: sbom-${{ matrix.name }}-image.spdx.json
      
      # Install Cosign for image signing
      - name: Install Cosign
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: sigstore/cosign-installer@v3
      
      # Push image to registry (main branch only)
      - name: Push image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Sign the container image with Sigstore
      - name: Sign container image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "Signing image with Cosign..."
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            echo "Signing $tag"
            cosign sign --yes "$tag"
          done
      
      # Attest SBOM to the image
      - name: Attest SBOM
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "Attesting SBOM to image..."
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            echo "Attesting SBOM to $tag"
            cosign attest --yes --predicate sbom-${{ matrix.name }}-image.spdx.json --type spdx "$tag"
          done
  
  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [dotnet-build-test, nextjs-build-test, helm-observability-test, docker-build]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: Check job results
        run: |
          echo "Build and Test Status:"
          echo "  .NET Build and Test: ${{ needs.dotnet-build-test.result }}"
          echo "  Next.js Build and Test: ${{ needs.nextjs-build-test.result }}"
          echo "  Helm Observability Test: ${{ needs.helm-observability-test.result }}"
          echo "  Docker Build and Scan: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.dotnet-build-test.result }}" != "success" ]] || \
             [[ "${{ needs.nextjs-build-test.result }}" != "success" ]] || \
             [[ "${{ needs.helm-observability-test.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline passed"
          fi
