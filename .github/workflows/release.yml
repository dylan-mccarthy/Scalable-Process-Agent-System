name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

env:
  DOTNET_VERSION: '9.0'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

jobs:
  # Build and publish release artifacts
  release:
    name: Build and Publish Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
    
    strategy:
      matrix:
        include:
          - name: control-plane
            dockerfile: ./src/ControlPlane.Api/Dockerfile
            context: .
            image: control-plane
          - name: node-runtime
            dockerfile: ./src/Node.Runtime/Dockerfile
            context: .
            image: node-runtime
          - name: admin-ui
            dockerfile: ./src/admin-ui/Dockerfile
            context: ./src/admin-ui
            image: admin-ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version
        id: version
        run: |
          REF="${{ github.ref }}"
          if [[ "$REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      
      # Security scanning with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.name }}.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
          category: 'trivy-release-${{ matrix.name }}'
      
      # Generate comprehensive SBOM
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}:${{ steps.version.outputs.version }}
          artifact-name: sbom-${{ matrix.name }}-${{ steps.version.outputs.version }}.spdx.json
          output-file: sbom-${{ matrix.name }}-${{ steps.version.outputs.version }}.spdx.json
          format: spdx-json
      
      - name: Upload SBOM to release
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.name }}-release
          path: sbom-${{ matrix.name }}-${{ steps.version.outputs.version }}.spdx.json
      
      # Install Cosign for signing
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      
      # Sign all image tags
      - name: Sign container images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "Signing release images..."
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            echo "Signing: $tag"
            cosign sign --yes "$tag"
          done
      
      # Attest SBOM to images
      - name: Attest SBOM to images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "Attesting SBOM to release images..."
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            echo "Attesting SBOM to: $tag"
            cosign attest --yes --predicate sbom-${{ matrix.name }}-${{ steps.version.outputs.version }}.spdx.json --type spdx "$tag"
          done
      
      # Attach SBOM to GitHub Release
      - name: Attach SBOM to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: sbom-${{ matrix.name }}-${{ steps.version.outputs.version }}.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Create release summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: Download all SBOMs
        uses: actions/download-artifact@v4
        with:
          pattern: sbom-*-release
          path: ./sboms
      
      - name: Create release summary
        run: |
          {
            echo "# Release Summary"
            echo ""
            echo "## Container Images"
            echo ""
            echo "The following images have been built, signed, and published:"
            echo ""
            echo "- Control Plane API"
            echo "- Node Runtime"
            echo "- Admin UI"
            echo ""
            echo "## Security"
            echo ""
            echo "✅ All images are signed with Sigstore/Cosign"
            echo "✅ SBOMs generated and attested for all images"
            echo "✅ Vulnerability scanning completed"
            echo ""
            echo "## Verification"
            echo ""
            echo "To verify image signatures:"
            echo '```bash'
            echo "cosign verify ${{ env.REGISTRY }}/${{ github.repository }}/control-plane:latest"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
